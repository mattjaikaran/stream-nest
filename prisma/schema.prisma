datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  email       String       @unique
  username    String       @unique
  location    String?
  zipCode     String?
  dateCreated DateTime     @default(now())
  verified    Boolean      @default(false)
  ipAddress   String
  watchHistory WatchHistory[]
  likes       Like[]
  dislikes    Dislike[]
  comments    Comment[]
  channels    Channel[]
  playlists   Playlist[]
  videos      Video[]
}

model Organization {
  id             String       @id @default(uuid())
  name           String
  owner          User         @relation(fields: [ownerId], references: [id])
  ownerId        String
  username       String       @unique
  employees      User[]       @relation("Employees")
  type           String
  verified       Boolean      @default(false)
  channels       Channel[]
  playlists      Playlist[]
  videos         Video[]
}

model Channel {
  id             String       @id @default(uuid())
  name           String
  owner          User         @relation(fields: [ownerId], references: [id])
  ownerId        String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  playlists      Playlist[]
  videos         Video[]
}

model Playlist {
  id             String       @id @default(uuid())
  name           String
  owner          User         @relation(fields: [ownerId], references: [id])
  ownerId        String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  videos         Video[]
}

model Video {
  id          String       @id @default(uuid())
  name        String
  views       Int          @default(0)
  uploadedBy  User         @relation(fields: [uploadedById], references: [id])
  uploadedById String
  dateCreated DateTime     @default(now())
  playlist    Playlist     @relation(fields: [playlistId], references: [id])
  playlistId  String
  watchHistories WatchHistory[]
  likes       Like[]
  dislikes    Dislike[]
  comments    Comment[]
}

model WatchHistory {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  watchedAt  DateTime @default(now())
}

model Like {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  likedAt    DateTime @default(now())
}

model Dislike {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  dislikedAt DateTime @default(now())
}

model Comment {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  content    String
  commentedAt DateTime @default(now())
}